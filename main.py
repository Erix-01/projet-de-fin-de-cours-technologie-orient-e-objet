# ===============================================================
# PROJET DE FIN DE COURS
# Syst√®me de Gestion d‚ÄôEntreprise de Location de V√©hicules
# ===============================================================
# √âtape 1 & 2 :
# Objectif :
# - Mettre en pratique les concepts fondamentaux de la POO :
#   Classes, Objets, Encapsulation, H√©ritage, Polymorphisme, Abstraction.
# - Organiser les relations logiques entre les classes sans UML formel.
# ---------------------------------------------------------------
# Ce code illustre la mod√©lisation de base du syst√®me ACA :
#  - Gestion des v√©hicules (voitures et motos)
#  - Gestion des clients
#  - Gestion des contrats de location
# ---------------------------------------------------------------


from classes import *





# ==========================================================
# CLASSE SYST√àME DE LOCATION
# ==========================================================
class SystemeLocation:
    def __init__(self):
        self.__vehicules = []
        self.__clients = []
        self.__contrats = []
        # Charger automatiquement les donn√©es si elles existent
        try:
            self.charger_donnees()
        except Exception:
            # en cas d'erreur de chargement, on continue avec des listes vides
            pass

    #getters pour les attributs priv√©s
    def get_vehicule(self):
        return self.__vehicules
    
    def get_client(self):
        return self.__clients
    
    def get_contrat(self):
        return self.__contrats

    # --- Ajout de client ---
    def ajouter_client(self):
        nom = input("Nom du client : ")
        prenom = input("Pr√©nom du client : ")
        telephone = input("T√©l√©phone : ")
        client = Client(nom, prenom, telephone)
        self.__clients.append(client)
        print("‚úÖ Client ajout√© avec succ√®s.\n")
        # sauvegarde imm√©diate
        try:
            self.sauvegarder_donnees()
        except Exception:
            pass

    # --- Affichage des clients ---
    def afficher_clients(self):
        if not self.__clients:
            print("Aucun client enregistr√©.")
        else:
            print("===== LISTE DES CLIENTS =====\n")
            for i, c in enumerate(self.__clients):
                print(f"{i + 1} - {c.afficher_details()}")
                
            print("=============================\n")

    # --- Ajout de v√©hicule ---
    def ajouter_vehicule(self):
        type_v = input("Type de v√©hicule (voiture/moto) : ")
        marque = input("Marque : ")
        modele = input("Mod√®le : ")
        annee = input("Ann√©e : ")
        immatriculation = input("Immatriculation : ")
        prix = float(input("Prix journalier : "))
        

        if type_v.lower() == "voiture":
            nombre_de_portes = int(input("Nombre de portes (pour voiture) : "))
            v = Voiture(marque, modele, annee, prix, nombre_de_portes, immatriculation=immatriculation)
        elif type_v.lower() == "moto":
            v = Moto(marque, modele, annee, prix_journalier=prix, immatriculation=immatriculation)
        else:
            return ("Type de v√©hicule invalide")
        
        

        self.__vehicules.append(v)
        print("‚úÖ V√©hicule ajout√© avec succ√®s.\n")
        try:
            self.sauvegarder_donnees()
        except Exception:
            pass

    # --- Affichage des v√©hicules ---
    def afficher_vehicules(self):   
        if not self.__vehicules:
            return ("Aucun v√©hicule enregistr√©.")
        
        print("\n===== LISTE DES V√âHICULES =====")
        for v in self.__vehicules:
            dispo = "Disponible" if v.est_disponible() else "Indisponible"
            print(f"- {v.get_marque()} {v.get_modele()} ({v.get_annee()}) immatriculation : {v.get_immatriculation()} | {dispo}")
        print("===============================\n")

    # --- Cr√©er un contrat ---
    def creer_contrat(self):
        if not self.__clients or not self.__vehicules:
            print("‚ö†Ô∏è Vous devez d'abord ajouter des clients et des v√©hicules.")
            

        # S√©lection du client
        print("\nListe des clients :")
        for i, c in enumerate(self.__clients):
            print(f"{i + 1}. {c.get_nom()}")
        choix_client = int(input("Choisissez un client : ")) - 1
        client = self.__clients[choix_client]

        # S√©lection du v√©hicule disponible
        print("\nV√©hicules disponibles :")
        disponibles = [v for v in self.__vehicules if v.est_disponible()]
        if not disponibles:
            print("Aucun v√©hicule disponible.")
            

        for i, v in enumerate(disponibles):
            print(f"{i + 1}. {v.get_marque()} {v.get_modele()}")
        choix_vehicule = int(input("Choisissez un v√©hicule : ")) - 1
        vehicule = disponibles[choix_vehicule]

        # Dur√©e de location
        nb_jours = int(input("Nombre de jours de location : "))

        # Cr√©ation du contrat
        contrat = ContratLocation(client, vehicule, nb_jours)
        self.__contrats.append(contrat)
        print("\n‚úÖ Contrat cr√©√© avec succ√®s !\n")
        contrat.afficher_details()
        try:
            self.sauvegarder_donnees()
        except Exception:
            pass

    # --- Afficher tous les contrats actifs ---
    def afficher_contrats(self):
        if not self.__contrats:
            print("Aucun contrat enregistr√©.")
            return
        print("\n===== LISTE DES CONTRATS ACTIFS =====")
        for c in self.__contrats:
            c.afficher_details()

    # --- Test polymorphisme ---
    def tester_polymorphisme(self):
        print("\n=== TEST DU POLYMORPHISME ===")
        for v in self.__vehicules:
            v.afficher_details()

    # --- Persistence (sauvegarde / chargement) ---
    def sauvegarder_donnees(self):
        # utilise GestionnaireDonnees d√©fini dans classes.py
        GestionnaireDonnees.sauvegarder(self.__vehicules, self.__clients, self.__contrats)

    def charger_donnees(self):
        data = GestionnaireDonnees.charger()
        # data contient des objets reconstruits
        self.__vehicules = data.get('vehicules', [])
        self.__clients = data.get('clients', [])
        self.__contrats = data.get('contrats', [])
    
    




# ==========================================================
# PROGRAMME PRINCIPAL
# ==========================================================
def main():
    systeme = SystemeLocation()
    
    while True:
        print("\n=== MENU PRINCIPAL ===")
        print("1. Ajouter un client")
        print("2. Afficher la liste des clients")
        print("3. Ajouter un v√©hicule")
        print("4. Afficher la liste des v√©hicules")
        print("5. Cr√©er un contrat de location")
        print("6. Afficher la liste des contrats actifs")
        print("7. Tester le polymorphisme (Voiture/Moto)")
        print("0. Quitter")

        choix = input("Votre choix : ")

        if choix == "1":
            systeme.ajouter_client()
        elif choix == "2":
            systeme.afficher_clients()
        elif choix == "3":
            systeme.ajouter_vehicule()
        elif choix == "4":
            systeme.afficher_vehicules()
        elif choix == "5":
            systeme.creer_contrat()
        elif choix == "6":
            systeme.afficher_contrats()
        elif choix == "7":
            systeme.tester_polymorphisme()
        elif choix == "0":
            print("üëã Au revoir !")
            break
        else:
            return("Choix invalide, veuillez r√©essayer.")
        
        

        






if __name__ == "__main__":
    main()





